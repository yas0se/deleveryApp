// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String     @unique
  password          String
  phone             String     @unique
  parcels           Parcel[]   @relation("UserParcels")
  reports           Report[]   @relation("UserReports")
  ratings           Rating[]   @relation("UserRatings")
  demandes          Demande[]  @relation("UserDemandes")
  messagesSent      Message[]  @relation("MessagesSent")
  messagesReceived  Message[]  @relation("MessagesReceived")
}
model Parcel {
  id          Int        @id @default(autoincrement())
  description String
  weight      Float
  price       Float
  origin      String
  destination String
  userId      Int
  user        User       @relation("UserParcels", fields: [userId], references: [id])
  reports     Report[]   @relation("ParcelReports")
  demandes    Demande[]  @relation("ParcelDemandes")
}

model Demande {
  id          Int        @id @default(autoincrement())
  offer       Float
  userId      Int
  user        User       @relation("UserDemandes", fields: [userId], references: [id])
  parcelId    Int
  parcel      Parcel     @relation("ParcelDemandes", fields: [parcelId], references: [id])
  status      String     @default("pending") // "pending", "accepted", "rejected"
  createdAt   DateTime   @default(now())
}

model Report {
  id        Int        @id @default(autoincrement())
  reason    String
  userId    Int
  user      User       @relation("UserReports", fields: [userId], references: [id])
  parcelId  Int
  parcel    Parcel     @relation("ParcelReports", fields: [parcelId], references: [id])
}

model Rating {
  id        Int        @id @default(autoincrement())
  score     Int
  comment   String
  userId    Int
  user      User       @relation("UserRatings", fields: [userId], references: [id])
  raterId   Int
}

model Message {
  id           Int      @id @default(autoincrement())
  content      String
  senderId     Int
  receiverId   Int
  sender       User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver     User     @relation("MessagesReceived", fields: [receiverId], references: [id])
}
